split_name("Karel Novák")
#' Capitalize string
#'
#' @param x String
capitalize <- function(x){
tmp <- unlist(strsplit(x, "\\s|[-]"))
out <- unlist(purrr::map(tmp, function(x)
paste0(toupper(substring(x, 1, 1)),
tolower(substring(x, 2, nchar(x))))))
paste(out, collapse = " ")
}
split_name("Karel Novák")
find_first_name("Karel", 0.1)
find_first_name("Novák", 0.1)
find_last_name("Novák", 0.1)
find_last_name("Karel", 0.1)
debug(split_name)
split_name("Karel Novák")
split_name("Novák Adam", reversed=TRUE, tolerance=0),
split_name("Novák Adam", reversed=TRUE, tolerance=0)
library(nameparser)
split_name("Novák Adam", reversed=TRUE, tolerance=0)
debug(split_name)
split_name("Novák Adam", reversed=TRUE, tolerance=0)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
find_first_name("Augustin")
find_first_name("Augustin", tolerance = 0.1)
find_first_name("Karel", tolerance = 0.1)
find_first_name("Andrle", tolerance = 0.1)
find_first_name("Sylor", tolerance = 0.1)
library(nameparser)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
x <- c("Karel", "Augustin", "Andrle", "Sylor")
first_names <- c("Karel")
last_names <- c("Andrle")
which(!x %in% c(first_names, last_names))
unknown_names <- names[missing]
missing <- which(!names %in% c(first_names, last_names))
names
names <- x
missing <- which(!names %in% c(first_names, last_names))
unknown_names <- names[missing]
unknown_names
library(nameparser)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
debug(split_name)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
library(nameparser)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
debug(split_name)
split_name("Augustin Karel Andrle Sylor", reversed = FALSE)
zoo::na.locf()
zoo::na.locf
?zoo::na.locf
bz <- zoo(c(2,NA,1,4,5,2))
na.locf(bz)
na.locf(bz, fromLast = TRUE)
library(zoo)
bz <- c(2,NA,1,4,5,2)
na.locf(bz)
na.locf(bz, fromLast = TRUE)
tmp <- data.frame(
name = c("Karel", "Augustin", "Andrle", "Sylor"),
type = c("First", NA, "Last", NA)
)
tmp$type <- zoo::na.locf(tmp$type)
View(tmp)
split_name("Novák Adam", reversed = TRUE, tolerance = 0)
library(nameparser)
split_name("Novák Adam", reversed = TRUE, tolerance = 0)
debug(split_name)
split_name("Novák Adam", reversed = TRUE, tolerance = 0)
last_names[last_names != tail(names, 1)]
library(nameparser)
split_name("Augustin Karel Andrle Sylor", FALSE)
split_name("Augustin Karel Andrle Sylor", FALSE)
debug(split_name)
split_name("Augustin Karel Andrle Sylor", FALSE)
library(nameparser)
debug(split_name)
split_name("Augustin Karel Andrle Sylor", FALSE)
?data.frame
library(nameparser)
debug(split_name)
split_name("Augustin Karel Andrle Sylor", FALSE)
library(nameparser)
library(nameparser)
?grepl
dplyr::case_when(grepl("Bc", "Bc Chobot") ~ "Bc.", grepl("Mgr", "Bc Chobot") ~ "Mgr.")
citation("dplyr")
citation("testthat")
municipal_2006 <- read.csv("~/repos/github/senate/municipal_data/municipal_2006.csv")
View(municipal_2006)
municipal_2006 <- municipal_2006[1:1000, ]
municipal_2006$titles <- purrr::map(municipal_2006$name, extract_titles)
class(municipal_2006$titles)
municipal_2006$titles <- unlist(purrr::map(municipal_2006$name, extract_titles))
class(municipal_2006$titles)
municipal_2006$full_name <- unlist(purrr::map(municipal_2006$name, extract_text_before_titles))
municipal_2006$full_name <- unlist(purrr::map(municipal_2006$name, extract_text_before_titles))
?strsplit
debug(extract_text_before_titles)
municipal_2006$full_name <- unlist(purrr::map(municipal_2006$name, extract_text_before_titles))
municipal_2006$full_name <- unlist(purrr::map(municipal_2006$name, extract_text_before_titles))
?purrr::map
extract_text_before_titles(municipal_2006$name[1])
municipal_2006$name[1]
municipal_2006$name %<>% as.character
extract_text_before_titles(municipal_2006$name[1])
municipal_2006$full_name <- unlist(purrr::map(municipal_2006$name, extract_text_before_titles))
undebug(extract_text_before_titles)
municipal_2006$full_name <- unlist(purrr::map(municipal_2006$name, extract_text_before_titles))
municipal_2006$recreated <- unlist(purrr::map2(municipal_2006$full_name, municipal_2006$titles, function(x, y) paste(x, y, collapse = " ")))
sum(municipal_2006$name != municipal_2006$recreated)
municipal_2006[municipal_2006$name != municipal_2006$recreated, c(5, 17)]
extract_titles("Šenkýř Václav Doc.Dr. CSc.")
head(extract_titles("Šenkýř Václav Doc.Dr. CSc."), 1)
head(municipal_2006[municipal_2006$name != municipal_2006$recreated, c(5, 17)], 1)
h1<- head(municipal_2006[municipal_2006$name != municipal_2006$recreated, c(5, 17)], 1)
h1[1, 1]
h1[1, 2]
utf8ToInt(h1[1, 1])
utf8ToInt(h1[1, 2])
class(h1[1, 1])
class(h1[1, 2])
h1[1, 1] == h[1, 2]
h1[1, 1] == h1[1, 2]
municipal_2006[municipal_2006$name != municipal_2006$recreated, c(5, 17)]
municipal_2006[municipal_2006$name == municipal_2006$recreated, c(5, 17)]
municipal_2006[municipal_2006$name == municipal_2006$recreated, c(5, 18)]
municipal_2006[municipal_2006$name != municipal_2006$recreated, c(5, 18)]
full_name <- purrr::map(municipal_2006$full_name, split_full_name)
municipal_2006$name[1] == municipal_2006$recreated[1]
municipal_2006$name[1]
municipal_2006$recreated[1]
stringr::str_trim(municipal_2006$recreated[1])
municipal_2006$name[1] == stringr::str_trim(municipal_2006$recreated[1])
municipal_2006[municipal_2006$name != stringr::str_trim(municipal_2006$recreated), c(5, 18)]
library(nameparser)
library(nameparser)
#' Extract text which is before academic titles
#'
#' @param x String containing name with academic titles (e.g. Karel Novák prof. RNDr.)
#' @export
extract_text_before_titles <- function(x){
# delete part indicating senior/junior
tmp <- gsub("\\b(nejml\\.)|(ml\\.)|(st\\.)", "", as.character(x))
tmp <- unlist(strsplit(tmp, "\\s"))
first_title <- head(which(grepl("([A-Za-z]+\\.)|([A-Z]{2,3})", tmp)), 1)
if(length(first_title)){
rest <- tmp[0:(first_title-1)]
paste(rest, collapse = " ")
}else{
x
}
}
extract_text_before_titles("Novák ml. Karel")
gsub("\\b(ml\\.)", "", "Novák ml. Karel")
gsub("\\b(ml\\.\\s)", "", "Novák ml. Karel")
gsub("\\b(nejml\\.)|(ml\\.)|(st\\.)\\s", "", "Novák ml. Karel")
gsub("\\b((nejml\\.)|(ml\\.)|(st\\.)\\s)", "", "Novák ml. Karel")
gsub("\\b((nejml\\.\\s)|(ml\\.\\s)|(st\\.\\s)", "", "Novák ml. Karel")
gsub("\\b(nejml\\.\\s)|(ml\\.\\s)|(st\\.\\s)", "", "Novák ml. Karel")
library(nameparser)
debug(extract_text_before_titles)
extract_text_before_titles("Novák ml. Karel")
library(nameparser)
install.packages("profvis")
??profvis
profvis::profvis(expr = split_full_name("Novák Karel"))
#' Split name into first and last name
#' @param x String containing full name
#' @param reversed Logical indicating whether the full name is
#' in reversed order (first name at the end)
#' @param tolerance The first and last name are assigned by the probability counted as
#' probability of a name being a first name = how many times is this name used as first name /
#' (how many times is this name used as first name + how many times is this name used as last name)
#' based on data from the Ministry of Interior. If tolerance is 0, only names that are used
#' only as first names will be labeled as first names etc.
#' @export
split_full_name <- function(x, reversed = TRUE, tolerance = 0.1){
full_name <- capitalize(x)
names <- unlist(strsplit(full_name, "\\s"))
first_names <- purrr::map(names, function(x)
find_first_name(x, tolerance))
last_names <- purrr::map(names, function(x)
find_last_name(x, tolerance))
if (!length(last_names)) {
if (reversed){
first_names <- first_names[first_names != head(names, 1)]
last_names <- head(names, 1)
}else{
first_names <- first_names[first_names != tail(names, 1)]
last_names <- tail(names, 1)
}
}
if (!length(first_names)) {
if (reversed){
last_names <- last_names[last_names != tail(names, 1)]
first_names <- tail(names, 1)
}else{
last_names <- last_names[last_names != head(names, 1)]
first_names <- head(names, 1)
}
}
if (length(c(first_names, last_names)) < length(names)){
decide_unknown_names(names, first_names, last_names)
} else {
list(paste(first_names, collapse = " "),
paste(last_names, collapse = " "))
}
}
library(nameparser)
library(nameparser)
library(nameparser)
library(nameparser)
split_full_name("Novák Adam", reversed = TRUE, tolerance = 0),
list("Adam", "Novák")
split_full_name("Novák Adam", reversed = TRUE, tolerance = 0)
library(nameparser)
split_full_name("Novák Adam", reversed = TRUE, tolerance = 0)
#' Split name into first and last name
#' @param x String containing full name
#' @param reversed Logical indicating whether the full name is
#' in reversed order (first name at the end)
#' @param tolerance The first and last name are assigned by the probability counted as
#' probability of a name being a first name = how many times is this name used as first name /
#' (how many times is this name used as first name + how many times is this name used as last name)
#' based on data from the Ministry of Interior. If tolerance is 0, only names that are used
#' only as first names will be labeled as first names etc.
#' @export
split_full_name <- function(x, reversed = TRUE, tolerance = 0.1){
full_name <- capitalize(x)
names <- unlist(strsplit(full_name, "\\s"))
first_names <- unlist(purrr::map(names, function(x)
find_first_name(x, tolerance)))
last_names <- unlist(purrr::map(names, function(x)
find_last_name(x, tolerance)))
if (!length(last_names)) {
if (reversed){
first_names <- first_names[first_names != head(names, 1)]
last_names <- head(names, 1)
}else{
first_names <- first_names[first_names != tail(names, 1)]
last_names <- tail(names, 1)
}
}
if (!length(first_names)) {
if (reversed){
last_names <- last_names[last_names != tail(names, 1)]
first_names <- tail(names, 1)
}else{
last_names <- last_names[last_names != head(names, 1)]
first_names <- head(names, 1)
}
}
if (length(c(first_names, last_names)) < length(names)){
decide_unknown_names(names, first_names, last_names)
} else {
list(paste(first_names, collapse = " "),
paste(last_names, collapse = " "))
}
}
split_full_name("Novák Adam", reversed = TRUE, tolerance = 0)
library(nameparser)
profvis::profvis(expr = split_full_name("Novák Karel"))
full_name <- purrr::map(municipal_2006$full_name, split_full_name)
full_name <- purrr::map(municipal_2006$full_name[1:100], split_full_name)
do.call(rbind, full_name)
#' Split full name into first and last name and add them to data.frame
#'
#' @param df dataframe with the data
#' @param full_name name of the column containing full name
#' @param keep logical indicating if the column containing full name should be kept
#' @param ... additional params passed to split_full_name function
#' @export
add_names_to_df <- function(df, full_name, keep = TRUE, ...){
full_names <- purrr::map(df[[full_name]], split_full_name, ...)
tmp <- as.data.frame(do.call(rbind, full_names))
colnames(tmp) <- c("first_name", "last_name")
if (!keep){
df[[full_name]] <- NULL
}
cbind(df, tmp)
}
add_names_to_df(head(municipal_2006, 5), "name")
data("first_names")
head(first_names)
?grepl
grepl("á$", "Krákora")
grepl("á$", "Nováková")
grepl("á$", c("Smiggels", "Nováková"))
parse_gender <- function(df,
first_name_col = "first_name",
last_name_col = "last_names",
tolerance = 0.1){
data("first_names")
unlist(purrr::map2(df[[first_name_col]], df[[last_name_col]],
function(x, y) parse_person_gender(x, y, tolerance, first_names)))
}
parse_person_gender <- function(first_name, last_name, tolerance, prob_data){
first_names <- strsplit(first_name, "\\s")
gender <- NA_character_
if (any(first_names %in% prob_data$name &&
prob_data[first_names %in% prob_data$name]$prob_male >= (1 - tolerance))){
gender <- "Male"
} else if (any(first_names %in% prob_data$name &&
prob_data[first_names == prob_data$name]$prob_male <= (0 + tolerance))){
gender <- "Female"
}
if (is.na(gender)){
if(any(grepl("á$", last_name))){
gender <- "Female"
}else{
gender <- "Male"
}
}
}
head(municipal_2006, 5)
h5 <- head(municipal_2006, 5)
h5 %<>% add_names_to_df
h5 %<>% add_names_to_df(full_name = "name")
View(h5)
parse_gender <- function(df,
first_name_col = "first_name",
last_name_col = "last_names",
tolerance = 0.1){
data("first_names")
df$gender <- unlist(purrr::map2(df[[first_name_col]], df[[last_name_col]],
function(x, y) parse_person_gender(x, y, tolerance, first_names)))
df
}
parse_gender(h5, "first_name", "last_name", 0.05)
parse_person_gender <- function(first_name, last_name, tolerance, prob_data){
first_names <- strsplit(first_name, "\\s")
gender <- NA_character_
if (any(first_names %in% prob_data$name &&
prob_data[first_names %in% prob_data$name]$prob_male >= (1 - tolerance))){
gender <- "Male"
} else if (any(first_names %in% prob_data$name &&
prob_data[first_names == prob_data$name]$prob_male <= (0 + tolerance))){
gender <- "Female"
}
if (is.na(gender)){
if(any(grepl("á$", last_name))){
gender <- "Female"
}else{
gender <- "Male"
}
}
gender
}
parse_person_gender("Karel", "Novák", 0.05, first_names)
parse_gender <- function(df,
first_name_col = "first_name",
last_name_col = "last_names",
tolerance = 0.1){
data("first_names")
df$gender <- unlist(purrr::map2(df[[first_name_col]], df[[last_name_col]],
function(x, y) parse_person_gender(x, y, tolerance, first_names)))
df
}
parse_gender(h5, "first_name", "last_name", 0.05)
parse_person_gender("Dana", "Truhlářová", 0.05, first_names)
debug(parse_person_gender)
parse_person_gender("Dana", "Truhlářová", 0.05, first_names)
prob_data[first_names %in% prob_data$name]$prob_male >= (1 - tolerance)
prob_data[first_names %in% prob_data$name]
PROB_DATA <- data("first_names")
PROB_DATA <- get(data("first_names"))
parse_gender <- function(df,
first_name_col = "first_name",
last_name_col = "last_names",
tolerance = 0.1){
PROB_DATA <- get(data("first_names"))
df$gender <- unlist(purrr::map2(df[[first_name_col]], df[[last_name_col]],
function(x, y) parse_person_gender(x, y, tolerance, PROB_DATA)))
df
}
parse_person_gender <- function(first_name, last_name, tolerance, prob_data){
tmp_first_names <- strsplit(first_name, "\\s")
gender <- NA_character_
if (any(tmp_first_names %in% prob_data$name &&
prob_data[tmp_first_names %in% prob_data$name]$prob_male >= (1 - tolerance))){
gender <- "Male"
} else if (any(tmp_first_names %in% prob_data$name &&
prob_data[tmp_first_names == prob_data$name]$prob_male <= (0 + tolerance))){
gender <- "Female"
}
if (is.na(gender)){
if(any(grepl("á$", last_name))){
gender <- "Female"
}else{
gender <- "Male"
}
}
gender
}
parse_person_gender("Dana", "Truhlářová", 0.05, first_names)
debug(parse_person_gender)
parse_person_gender("Dana", "Truhlářová", 0.05, first_names)
prob_data[tmp_first_names %in% prob_data$name]$prob_male
prob_data[tmp_first_names == prob_data$name]$prob_male
prob_data[prob_data$name == tmp_first_names, ]$prob_male
parse_person_gender <- function(first_name, last_name, tolerance, prob_data){
tmp_first_names <- strsplit(first_name, "\\s")
gender <- NA_character_
if (any(tmp_first_names %in% prob_data$name &&
prob_data[prob_data$name == tmp_first_names, ]$prob_male >= (1 - tolerance))){
gender <- "Male"
} else if (any(tmp_first_names %in% prob_data$name &&
prob_data[prob_data$name == tmp_first_names, ]$prob_male <= (0 + tolerance))){
gender <- "Female"
}
if (is.na(gender)){
if(any(grepl("á$", last_name))){
gender <- "Female"
}else{
gender <- "Male"
}
}
gender
}
parse_person_gender("Dana", "Truhlářová", 0.05, first_names)
parse_gender <- function(df,
first_name_col = "first_name",
last_name_col = "last_names",
tolerance = 0.1){
PROB_DATA <- get(data("first_names"))
df$gender <- unlist(purrr::map2(df[[first_name_col]], df[[last_name_col]],
function(x, y) parse_person_gender(x, y, tolerance, PROB_DATA)))
df
}
parse_gender(h5, "first_name", "last_name", 0.05)
library(nameparser)
library(nameparser)
strsplit("Karel-Maria", "-")
strsplit("Karel-Maria", "\\s")
?data
library(listr)
remove.packages("nameparser")
grepl("ing.", pattern = "\\bing\\b")
#' Extract the highest received academic title
#'
#' @param x String containing all received academic titles
extract_highest_title <- function(x){
x <- tolower(x)
dplyr::case_when(grepl("\\b(bc|ba)\\b", x) ~ "Bachelor", #Bc, BcA, BA
grepl("\\b(m[a-z]{1,2}|ing)\\b", x) ~ "Master", #Mgr, MgA, MA
grepl("(dr|ph\\.+d|th\\.d|csc)\\b", x) ~ "Doctor"
grepl("\\bdoc\\b", x) ~ "Associate Professor (docent)", # doc.
grepl("\\bprof\\b", x) ~ "Professor" # prof.
)
}
#' Extract the highest received academic title
#'
#' @param x String containing all received academic titles
extract_highest_title <- function(x){
x <- tolower(x)
dplyr::case_when(grepl("\\b(bc|ba)\\b", x) ~ "Bachelor", #Bc, BcA, BA
grepl("\\b(m[a-z]{1,2}|ing)\\b", x) ~ "Master", #Mgr, MgA, MA
grepl("(dr|ph\\.+d|th\\.d|csc)\\b", x) ~ "Doctor"
grepl("\\bdoc\\b", x) ~ "Associate Professor (docent)", # doc.
grepl("\\bprof\\b", x) ~ "Professor") # prof.
}
?dplyr::case_when
#' Extract the highest received academic title
#'
#' @param x String containing all received academic titles
extract_highest_title <- function(x){
x <- tolower(x)
dplyr::case_when(grepl("\\bprof\\b", x) ~ "Professor", # prof.
grepl("\\bdoc\\b", x) ~ "Associate Professor (docent)", # doc.
grepl("(dr|ph\\.+d|th\\.d|csc)\\b", x) ~ "Doctor"
grepl("\\b(m[a-z]{1,2}|ing)\\b", x) ~ "Master", #Mgr, MgA, MA
grepl("\\b(bc|ba)\\b", x) ~ "Bachelor", #Bc, BcA, BA
TRUE ~ "No title")
}
#' Extract the highest received academic title
#'
#' @param x String containing all received academic titles
extract_highest_title <- function(x){
x <- tolower(x)
dplyr::case_when(grepl("\\bprof\\b", x) ~ "Professor", # prof.
grepl("\\bdoc\\b", x) ~ "Associate Professor (docent)", # doc.
grepl("(dr|ph\\.+d|th\\.d|csc)\\b", x) ~ "Doctor",
grepl("\\b(m[a-z]{1,2}|ing)\\b", x) ~ "Master", #Mgr, MgA, MA
grepl("\\b(bc|ba)\\b", x) ~ "Bachelor", #Bc, BcA, BA
TRUE ~ "No title")
}
extract_highest_title("Bc. Mgr. Karel Ph.D.")
extract_highest_title("prof. Bc. Mgr. Karel Ph.D.")
extract_highest_title("Simindr")
library(listr)
library(listr)
library(listr)
library(listr)
municipal_2014_clean <- read.csv("~/repos/github/volby_Rvest/municipal_2014_clean.csv")
View(municipal_2014_clean)
municipal_2014 <- municipal_2014_clean
rm(municipal_2014_clean)
municipal_2014$full_name <- listr::extract_text_before_titles(municipal_2014$name)
View(municipal_2014)
municipal_2014$full_name <- purrr::map(municipal_2014$name, listr::extract_text_before_titles)
municipal_2014$full_name <- unlist(purrr::map(municipal_2014$name, listr::extract_text_before_titles))
View(municipal_2014)
municipal_2014$titles <- unlist(purrr::map(municipal_2014$name, extract_titles))
View(municipal_2014)
municipal_2014 <- add_names_to_df(municipal_2014, "full_name", TRUE)
View(municipal_2014)
